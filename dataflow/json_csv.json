{
	"name": "json_csv",
	"properties": {
		"description": "converting json files to csv files",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json_ds",
						"type": "DatasetReference"
					},
					"name": "json"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "delimited_output_ds",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "flatten2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          batters as (batter as (id as short, type as string)[]),",
				"          id as short,",
				"          name as string,",
				"          ppu as double,",
				"          topping as (id as short, type as string)[],",
				"          type as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> json",
				"json foldDown(unroll(batters.batter),",
				"     mapColumn(",
				"          id,",
				"          type,",
				"          name,",
				"          ppu,",
				"          batter_id = batters.batter.id,",
				"          batter_type = batters.batter.type,",
				"          topping",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 foldDown(unroll(topping, topping),",
				"     mapColumn(",
				"          id,",
				"          type,",
				"          name,",
				"          ppu,",
				"          batter_id,",
				"          batter_type,",
				"          topping_id = topping.id,",
				"          topping_type = topping.type",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['sample.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}